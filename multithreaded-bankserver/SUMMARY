SUMMARY

My goal for this project was a clean set of maintainable code in case I choose to reuse/extend this shell sometime in the future. Thus with a bit of planning I was able to separate the functionality cleanly into different modules. The main function and real-eval-print loop the shell carries out are in resh.c. tokenizer.c takes a line of space-deliminted tokens and puts them into a dynamically sized 2-d array. Then the commands module actually executes the command through execvp or hands it off to builtins.c if it is a built-in. Background processes require only two calls from commands.c, one to check periodically if anything has exited and one to add new background jobs to the internal list. Compared to others my design took more code, but I think it is somewhat better designed, is easier to modify/understand, and is more reliable due to thourogh error handling.

What I learned from this project was not so much new commands or libraries, I had seen most of it in previous experience or previous labs. I did gain a better high-level overview of how the process table handles different states of processes and how I/O redirection works in UNIX. It was also good practice to go back and do some C after working in dynamic lanugages. Hence implementing a whole linked list with map and function pointers. I didn't have any particular difficulties in implementation. Sure, getting the dynamic array reallocation right took a couple tries as did the commands structure to handle bakcgrounding and I/O redirection, but nothing in particular tripped me up. Just a nice little project overall.
